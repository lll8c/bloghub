// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"geektime/webook/internal/events/article"
	"geektime/webook/internal/repository"
	"geektime/webook/internal/repository/cache"
	"geektime/webook/internal/repository/dao"
	"geektime/webook/internal/service"
	"geektime/webook/internal/web"
	"geektime/webook/internal/web/jwt"
	"geektime/webook/ioc"
	"github.com/google/wire"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitApp() *App {
	cmdable := ioc.InitRedis()
	jwtHandler := jwt.NewRedisJWTHandler(cmdable)
	loggerV1 := ioc.InitLoggerV1()
	v := ioc.InitMiddlewares(jwtHandler, loggerV1)
	db := ioc.InitDB(loggerV1)
	userDAO := dao.NewUserDao(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService()
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, jwtHandler)
	wechatService := ioc.InitWechatService()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, jwtHandler)
	articleDAO := dao.NewGROMArticleDAO(db)
	articleCache := cache.NewArticleRedisCache(cmdable)
	articleRepository := repository.NewArticleRepository(articleDAO, articleCache, loggerV1, userDAO)
	client := ioc.InitKafkaClient()
	syncProducer := ioc.InitSyncProducer(client)
	producer := article.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, loggerV1, producer)
	clientv3Client := ioc.InitEtcd()
	interactiveServiceClient := ioc.InitIntrGRPCClientV1(clientv3Client)
	articleHandler := web.NewArticleHandler(articleService, loggerV1, interactiveServiceClient)
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler, articleHandler)
	rankingCache := cache.NewRankingRedisCache(cmdable)
	rankingRepository := repository.NewCachedRankingRepository(rankingCache)
	rankingService := service.NewBatchRankingService(rankingRepository, articleService, interactiveServiceClient)
	rlockClient := ioc.InitRlockClient(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, loggerV1, rlockClient)
	cron := ioc.InitJobs(loggerV1, rankingJob)
	app := &App{
		server: engine,
		cron:   cron,
	}
	return app
}

// wire.go:

var rankingSvcSet = wire.NewSet(cache.NewRankingRedisCache, repository.NewCachedRankingRepository, service.NewBatchRankingService)
